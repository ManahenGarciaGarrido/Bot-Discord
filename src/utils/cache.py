"""
Cache Manager - Sistema de cach√© en memoria para informaci√≥n de videos
Reduce dram√°ticamente el tiempo de carga al reusar datos ya obtenidos
"""
import asyncio
import time
from typing import Dict, Optional, Any
import logging


logger = logging.getLogger('MusicBot.Cache')


class VideoCache:
    """
    Cach√© en memoria para informaci√≥n de videos de YouTube.

    Evita llamadas repetidas a yt-dlp para el mismo video,
    reduciendo significativamente el tiempo de respuesta.
    """

    def __init__(self, ttl: int = 3600):
        """
        Inicializar el cach√©.

        Args:
            ttl: Tiempo de vida en segundos (default: 1 hora)
        """
        self._cache: Dict[str, Dict[str, Any]] = {}
        self._ttl = ttl
        self._lock = asyncio.Lock()

    async def get(self, key: str) -> Optional[Dict]:
        """
        Obtener un valor del cach√©.

        Args:
            key: Clave (URL del video)

        Returns:
            Dict con la informaci√≥n del video o None si no existe/expir√≥
        """
        async with self._lock:
            if key not in self._cache:
                return None

            entry = self._cache[key]

            # Verificar si expir√≥
            if time.time() - entry['timestamp'] > self._ttl:
                del self._cache[key]
                logger.debug(f'Cache expired for: {key[:50]}...')
                return None

            logger.debug(f'‚úÖ Cache HIT for: {key[:50]}...')
            return entry['data']

    async def set(self, key: str, value: Dict) -> None:
        """
        Guardar un valor en el cach√©.

        Args:
            key: Clave (URL del video)
            value: Informaci√≥n del video
        """
        async with self._lock:
            self._cache[key] = {
                'data': value,
                'timestamp': time.time()
            }
            logger.debug(f'üíæ Cache SET for: {key[:50]}...')

    async def clear(self) -> None:
        """Limpiar todo el cach√©."""
        async with self._lock:
            count = len(self._cache)
            self._cache.clear()
            logger.info(f'üóëÔ∏è  Cache cleared ({count} entries removed)')

    async def remove(self, key: str) -> None:
        """
        Remover una entrada espec√≠fica del cach√©.

        Args:
            key: Clave a remover
        """
        async with self._lock:
            if key in self._cache:
                del self._cache[key]
                logger.debug(f'üóëÔ∏è  Cache entry removed: {key[:50]}...')

    async def cleanup_expired(self) -> None:
        """Limpiar entradas expiradas del cach√©."""
        async with self._lock:
            now = time.time()
            expired_keys = [
                key for key, entry in self._cache.items()
                if now - entry['timestamp'] > self._ttl
            ]

            for key in expired_keys:
                del self._cache[key]

            if expired_keys:
                logger.info(f'üóëÔ∏è  Cleaned {len(expired_keys)} expired cache entries')

    def get_stats(self) -> Dict[str, int]:
        """
        Obtener estad√≠sticas del cach√©.

        Returns:
            Dict con n√∫mero de entradas y tama√±o estimado
        """
        return {
            'entries': len(self._cache),
            'ttl': self._ttl
        }


# Instancia global del cach√©
video_cache = VideoCache(ttl=3600)  # 1 hora de TTL
